library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity keyboard is
    Port (
        clock : in STD_LOGIC; 
        reset : in STD_LOGIC; 
        ps2_clk : in STD_LOGIC; 
        ps2_data: in STD_LOGIC;
        char_code: out STD_LOGIC_VECTOR(7 downto 0);
        char_ready: out STD_LOGIC
    );
end entity keyboard;

architecture behav of keyboard is
  type state_type is (IDLE, DATA, PARITY, STOP);
  signal char_code_s, next_char_code_s: std_logic_vector (7 downto 0);
  signal pulse_s: std_logic;
  signal parity_bit, next_parity_bit: std_logic;
  signal ready, next_ready: std_logic;
  signal state, next_state: state_type:= IDLE;
  signal counter, next_counter: integer;
begin
  
  U1: entity work.oneshot(behav)
    port map(
      reset => reset,
      clock => clock,
      trigger_i => ps2_clk,
      pulse_o => pulse_s
    );
    
  storage_proc: process(clock, reset) is
    begin
      if (reset = '1') then
        char_code_s <= "00000000";
        state <= IDLE;
        parity_bit <= '0';
        ready <= '0';
        counter <= 1;
      elsif rising_edge(clock) then
        state <= next_state;
        counter <= next_counter;
        parity_bit <= next_parity_bit;
        ready <= next_ready;
        char_code_s <= next_char_code_s;
      end if;
end process storage_proc;
      
      
  next_state_proc: process(pulse_s, ps2_data, state, counter, parity_bit, char_code_s, ready) is
    begin 
      next_parity_bit <= parity_bit;
	    next_state <= state;
	    next_counter <= counter;
	    next_char_code_s <= char_code_s;
	    next_ready <= ready;
	
      if (pulse_s = '1') then
        case state is 
          when IDLE => 
            next_char_code_s <= "00000000";
            next_parity_bit <= '0';
            next_counter <= 1;     --------------------------------------????
            next_ready <= '0';
            if ps2_data = '1' then 
              next_state <= IDLE;
            else 
              next_state <= DATA;
            end if;
          when DATA =>  
            next_char_code_s <=  ps2_data & char_code_s(7 downto 1);
            next_parity_bit <= parity_bit xor ps2_data; 
            if (counter = 8) then   -----------------------------------------?????
              next_state <= PARITY;
            else
              next_state <= DATA;
              next_counter <= counter + 1;
            end if;
          when PARITY => 
            next_parity_bit <= parity_bit xor ps2_data;
            next_state <= STOP;
            next_ready <= '1';
          when STOP =>
            next_state <= IDLE;
        end case;
      end if;
    end process next_state_proc;
          
    char_code <= char_code_s;
    char_ready <= '1' when (parity_bit = '1' and state = STOP) ----------------------------????
                    else '0';
  
end behav;